/**
 * 工程名: KyGroup
 * 文件名: CrashHandler.java
 * 包名: com.edu.kygroup.controlcenter
 * 日期: 2013-10-27上午9:52:25
 * Copyright (c) 2013, 108room All Rights Reserved.
 *
 */

package com.edu.kygroup.controlcenter;

import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.Thread.UncaughtExceptionHandler;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.view.View;
import android.view.View.OnClickListener;

import com.edu.kygroup.utils.LogUtils;

/**
 * 类名: CrashHandler <br/>
 * 功能: TODO 添加功能描述. <br/>
 * 日期: 2013-10-27 上午9:52:25 <br/>
 * 
 * @author lx
 * @version
 * 
 *          /** 描述:CrashHandler
 *          <p />
 * 
 *          继承自 UncaughtExceptionHandler
 *          <p />
 * 
 *          UncaughtException处理类,当程序发生Uncaught异常的时候,由该类来接管程序,并记录发送错误报告.
 *          </p>
 * 
 *          如果程序出现了未捕获异常默认情况下则会出现强行关闭对话框 </p>
 * 
 *          实现该接口并注册为程序中的默认未捕获异常处理 这样当未捕获异常发生时，就可以做些异常处理操作</p>
 * 
 *          例如：收集异常信息，发送错误报告 等。
 */
public class CrashHandler implements UncaughtExceptionHandler {

	public static final String TAG = "CrashHandler"; // log tag
	private static CrashHandler INSTANCE = null;
	private Thread.UncaughtExceptionHandler mDefaultHandler;// UncaughtExceptionHandler
	private final SimpleDateFormat SDF = new SimpleDateFormat("yyyyMMdd.HHmmss");

	private CrashHandler() {
	}

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static CrashHandler getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new CrashHandler();
		}
		return INSTANCE;
	}

	/**
	 * 初始化
	 */
	public void init() {
		mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();
		Thread.setDefaultUncaughtExceptionHandler(this);
	}

	/**
	 * 当UncaughtException发生时会转入该函数来处理
	 * 
	 * @param thread
	 * @param ex
	 */
	@Override
	public void uncaughtException(Thread thread, Throwable ex) {
		if (!handleException(ex) && mDefaultHandler != null) {
			// 如果用户没有单独处理,则让系统默认的异常处理器来处理
			mDefaultHandler.uncaughtException(thread, ex);
		} else {
			// 用户未处理，系统默认的异常处理器未处理，最终弹出提示框
			// final ControlCenter controlCenter =
			// ControlCenter.getInstanse(null);
			// if (controlCenter != null) {
			// new Thread() {
			// @Override
			// public void run() {
			// Looper.prepare();
			// try{
			// // 弹出提示框
			// controlCenter.createDialog(ConstantGloble.SYSTEM_0000B,
			// R.string.system_crashed, onclickListener);
			// }catch (Exception e) {
			// LogGloble.w(TAG, "createDialog  error", e);
			// }
			//
			// Looper.loop();
			// }
			// }.start();

			// }

			// 休眠3秒后终止当前出现异常的activity
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				LogUtils.w(TAG, "InterruptedException", e);
			}

			// 终止当前出现uncaughtException的activity
			android.os.Process.killProcess(android.os.Process.myPid());
		}

	}

	/**
	 * 自定义错误处理,收集错误信息 发送错误报告等操作均在此完成. 开发者可以根据自己的情况来自定义异常处理逻辑
	 * 
	 * @param ex
	 * 
	 * @return true:如果处理了该异常信息; 否则返回false
	 */
	private boolean handleException(Throwable ex) {
		LogUtils.e(TAG, "UncaughtExceptionHandler", ex);
		if (ex == null) {
			return true;
		} else {
			// 写入错误信息到本地文件
			processException(ex);
		}

		return true;
	}

	/**
	 * 处理Exception(记录日志)
	 * 
	 * @param th
	 */
	public void processException(final Throwable th) {
		try {
			final String timestamp = SDF.format(new Date());

			final Writer result = new StringWriter();
			final PrintWriter printWriter = new PrintWriter(result);

			th.printStackTrace(printWriter);
			final String stacktrace = result.toString();
			printWriter.close();

			// final String name = BaseDroidApp.APP_PACKAGE + "."
			// + BaseDroidApp.APP_VERSION_NAME + "." + timestamp
			// + ".stacktrace";
			// final File filename = new File(LogManager.LOG_STORAGE, name);

			// writeToFile(stacktrace, filename);
		} catch (final Exception e) {
			LogUtils.w(TAG, "processException Exception", e);
		}
	}

	/**
	 * 写日志
	 * 
	 * @param stacktrace
	 * @param filename
	 */
	private void writeToFile(final String stacktrace, final File filename) {
		try {
			// final BufferedWriter bos = new BufferedWriter(new FileWriter(
			// filename));
			//
			// bos.write("Application information:\n\n");
			// bos.write("This file was generated by the "
			// + BaseDroidApp.APP_PACKAGE + "."
			// + BaseDroidApp.APP_VERSION_NAME + "\n");
			// bos.write("\nDevice information:\n\n");
			// bos.write("VERSION     : " + AndroidVersion.VERSION + "\n");
			// bos.write("BOARD       : " + Build.BOARD + "\n");
			// bos.write("BRAND       : " + Build.BRAND + "\n");
			// bos.write("CPU_ABI     : "
			// + BaseDroidApp.BUILD_PROPS
			// .getProperty("ro.product.cpu.abi") + "\n");
			// bos.write("CPU_ABI2    : "
			// + BaseDroidApp.BUILD_PROPS
			// .getProperty("ro.product.cpu.abi2") + "\n");
			// bos.write("DEVICE      : " + Build.DEVICE + "\n");
			// bos.write("DISPLAY     : " + Build.DISPLAY + "\n");
			// bos.write("FINGERPRINT : " + Build.FINGERPRINT + "\n");
			// bos.write("ID          : " + Build.ID + "\n");
			// bos.write("MANUFACTURER: "
			// + BaseDroidApp.BUILD_PROPS
			// .getProperty("ro.product.manufacturer") + "\n");
			// bos.write("MODEL       : " + Build.MODEL + "\n");
			// bos.write("PRODUCT     : " + Build.PRODUCT + "\n");
			// bos.write("\nError information:\n\n");
			// bos.write(stacktrace);
			// bos.flush();
			// bos.close();
			LogUtils.d(TAG, "Stacktrace is written: " + filename);
		} catch (final Exception e) {
			LogUtils.w(TAG, "writeToFile fail", e);
		}
	}

	/**
	 * 监听器-用于退出应用
	 */
	OnClickListener onclickListener = new OnClickListener() {
		@Override
		public void onClick(View v) {
			switch ((Integer) v.getTag()) {
			// case CustomDialog.TAG_CONFIRM:
			// // 无响应 留空
			// break;
			default:
				break;
			}
		}
	};

}
